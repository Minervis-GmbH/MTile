<?php

/* Copyright (c) 1998-2009 ILIAS open source, Extended GPL, see https://github.com/ILIAS-eLearning/ILIAS/tree/trunk/docs/LICENSE */

require_once __DIR__ . "/../../vendor/autoload.php";

use srag\DIC\SrTile\DICTrait;
use srag\Plugins\SrTile\Tile\Tile;
use srag\Plugins\SrTile\Tile\TileFormGUI;
use srag\Plugins\SrTile\Utils\SrTileTrait;

/**
 * Class SrTileGUI
 *
 * Generated by srag\PluginGenerator v0.9.2
 *
 * @author            studer + raimann ag - Team Custom 1 <support-custom1@studer-raimann.ch>
 * @author            studer + raimann ag - Martin Studer <ms@studer-raimann.ch>
 *
 * @ilCtrl_isCalledBy SrTileGUI: ilUIPluginRouterGUI
 */
class SrTileGUI {

	use DICTrait;
	use SrTileTrait;
	const PLUGIN_CLASS_NAME = ilSrTilePlugin::class;
	const CMD_EDIT_TILE = "editTile";
	const CMD_UPDATE_TILE = "updateTile";
	const CMD_CANCEL = "cancel";
	const LANG_MODULE_TILE = "tile";
	const GET_PARAM_OBJ_REF_ID = 'ref_id';


	/**
	 * SrTileGUI constructor
	 */
	public function __construct() {

	}


	/**
	 *
	 */
	public function executeCommand()/*: void*/ {
		$next_class = self::dic()->ctrl()->getNextClass($this);

		switch (strtolower($next_class)) {
			default:
				$this->setTabs();

				$cmd = self::dic()->ctrl()->getCmd();

				switch ($cmd) {
					case self::CMD_EDIT_TILE:
					case self::CMD_UPDATE_TILE:
					case self::CMD_CANCEL:
						$this->{$cmd}();
						break;

					default:
						break;
				}
				break;
		}
	}


	/**
	 * @param Tile $tile
	 *
	 * @return TileFormGUI
	 */
	protected function getTileFormGUI(Tile $tile): TileFormGUI {
		$form = new TileFormGUI($this, $tile);

		return $form;
	}


	/**
	 *
	 */
	protected function cancel()/*:void*/ {
		$this->dic()->ctrl()->redirectToURL(ilLink::_getStaticLink(self::tiles()->filterRefId()));
	}


	/**
	 *
	 */
	protected function editTile()/*: void*/ {
		$tile = self::tiles()->getInstanceForObjRefId(filter_input(INPUT_GET, "ref_id"));

		self::dic()->ctrl()->saveParameterByClass(self::class, self::GET_PARAM_OBJ_REF_ID);

		$form = $this->getTileFormGUI($tile);

		self::output()->output($form, true);
	}


	/**
	 *
	 */
	protected function updateTile()/*: void*/ {
		$tile = self::tiles()->getInstanceForObjRefId(self::tiles()->filterRefId());

		self::dic()->ctrl()->saveParameterByClass(self::class, self::GET_PARAM_OBJ_REF_ID);

		$form = $this->getTileFormGUI($tile);

		if (!$form->storeForm()) {
			self::output()->output($form, true);

			return;
		}

		ilUtil::sendSuccess(self::plugin()->translate("saved", self::LANG_MODULE_TILE), true);

		self::dic()->ctrl()->redirect($this, self::CMD_EDIT_TILE);
	}


	/**
	 *
	 */
	protected function setTabs()/*: void*/ {
		self::dic()->tabs()->clearTargets();

		self::dic()->tabs()->addTab(ilSrTileUIHookGUI::TAB_ID, self::plugin()->translate(ilSrTileUIHookGUI::TAB_ID), self::dic()->ctrl()
			->getLinkTargetByClass([
				ilUIPluginRouterGUI::class,
				self::class
			], self::CMD_EDIT_TILE));

		self::dic()->ctrl()->setParameter($this, "ref_id", self::tiles()->filterRefId());

		self::dic()->tabs()->setBackTarget(self::plugin()->translate("back", self::LANG_MODULE_TILE), self::dic()->ctrl()
			->getLinkTarget($this, self::CMD_CANCEL));
	}
}
