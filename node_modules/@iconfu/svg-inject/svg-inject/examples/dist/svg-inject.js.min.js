{"version":3,"sources":["svg-inject.js"],"names":["window","document","ATTRIBUTE_EXCLUSION_NAMES","A_ELEMENT","createElement","DIV_ELEMENT","SVG_NOT_SUPPORTED","SVGRect","DEFAULT_OPTIONS","cache","copyAttributes","afterLoad","beforeInject","NOOP","afterInject","onFail","TAG_NAME_PROPERTIES_MAP","clipPath","cursor","filter","linearGradient","marker","mask","pattern","radialGradient","INJECT","INJECTED","FAIL","STR_SVG_NOT_SUPPORTED","STR_LOAD_FAIL","STR_SVG_INVALID","STR___SVGINJECT","NULL","xmlSerializer","XMLSerializer","inject","img","svg","svgString","absUrl","options","buildSvg","parentNode","attributes","i","length","attribute","attributeName","name","indexOf","attributeValue","value","title","createElementNS","textContent","insertBefore","firstChild","setAttribute","defElements","querySelectorAll","element","id","tag","tagName","newId","Math","random","toString","substr","properties","j","property","refElements","k","getAttribute","replace","makeIdsUnique","injectElem","replaceChild","removeOnLoadAttribute","svgInvalid","extendOptions","newOptions","args","arguments","argument","key","svgStr","innerHTML","e","removeChild","SVGElement","createComment","removeAttribute","fail","status","svgNotSupported","loadFail","loadFailOrSvgNotSupported","removeEventListeners","onload","onerror","throwImgNotSet","Error","SVGInjectInstance","createSVGInject","globalName","defaultOptions","svgLoadCache","SVGInject","src","url","href","setSvgLoadCacheValue","val","svgLoad","afterImageComplete","path","callback","errorCallback","req","XMLHttpRequest","onreadystatechange","readyState","responseXML","responseText","open","send","load","svgXml","Document","documentElement","serializeToString","Array","isArray","push","complete","css","head","getElementsByTagName","style","type","styleSheet","cssText","appendChild","createTextNode","addStyleToHead","setOptions","create","err","fallbackSrc","module","exports"],"mappings":"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","file":"../svg-inject.js","sourcesContent":["/**\n * SVGInject\n * A tiny, intuitive, robust, caching solution for injecting SVG files inline into the DOM.\n *\n * https://github.com/iconfu/svg-inject\n *\n * Copyright (c) 2018 Iconfu <info@iconfu.com>\n * @license MIT License - https://github.com/iconfu/svg-inject/blob/master/LICENSE\n */\n\n(function(window, document) {\n  var ATTRIBUTE_EXCLUSION_NAMES = ['src', 'alt', 'onload'];\n  var A_ELEMENT = document.createElement('a');\n  var DIV_ELEMENT = document.createElement('div');\n  var SVG_NOT_SUPPORTED = typeof SVGRect == \"undefined\";\n  var DEFAULT_OPTIONS = {\n    cache: true,\n    copyAttributes: true,\n    afterLoad: null,\n    beforeInject: NOOP,\n    afterInject: NOOP,\n    onFail: NOOP\n  };\n  var TAG_NAME_PROPERTIES_MAP = {\n    clipPath: ['clip-path'],\n    cursor: [],\n    filter: [],\n    linearGradient: ['fill', 'stroke'],\n    marker: ['marker', 'marker-end', 'marker-mid', 'marker-start'],\n    mask: [],\n    pattern: ['fill', 'stroke'],\n    radialGradient: ['fill', 'stroke']\n  };\n  var INJECT = 1;\n  var INJECTED = 2;\n  var FAIL = 3;\n  var STR_SVG_NOT_SUPPORTED = 'SVG_NOT_SUPPORTED';\n  var STR_LOAD_FAIL = 'LOAD_FAIL';\n  var STR_SVG_INVALID = 'SVG_INAVLID';\n  var STR___SVGINJECT = '__svgInject';\n  var NULL = null;\n  var xmlSerializer = new XMLSerializer();\n\n  function NOOP() {}\n\n  function getAbsoluteUrl(url) {\n    A_ELEMENT.href = url;\n    return A_ELEMENT.href;\n  }\n\n  function isSVGElem(svgElem) {\n    return svgElem instanceof SVGElement;\n  }\n\n  // load svg with an XHR requuest\n  function load(path, callback, errorCallback) {\n    if (path) {\n      var req = new XMLHttpRequest();\n      req.onreadystatechange = function() {\n        if (req.readyState == 4 && req.status == 200) {\n          // readyState is done, request status ok\n          callback(req.responseXML, req.responseText);\n        }\n      };\n      req.onerror = errorCallback;\n      req.open('GET', path, true);\n      req.send();\n    }\n  }\n\n  // copy attributes from img element to svg element\n  function copyAttributes(img, svg, options) {\n    if (options.copyAttributes) {\n      var attributes = img.attributes;\n\n      for (var i = 0; i < attributes.length; ++i) {\n        var attribute = attributes[i];\n        var attributeName = attribute.name;\n\n        if (ATTRIBUTE_EXCLUSION_NAMES.indexOf(attributeName) == -1) {\n          var attributeValue = attribute.value;\n\n          if (attributeName == 'title') {\n            // if a title attribute exists insert it as the title tag in SVG\n            var title = document.createElementNS('http://www.w3.org/2000/svg', 'title');\n            title.textContent = attributeValue;\n            svg.insertBefore(title, svg.firstChild);\n          } else {\n            svg.setAttribute(attributeName, attributeValue);\n          }\n        }\n      }\n    }\n  }\n\n  function makeIdsUnique(svg) {\n    // Process all elements directly below the <defs> element(s).\n    var defElements = svg.querySelectorAll('defs>[id]');\n    for (var i = 0; i < defElements.length; i++) {\n      var element = defElements[i];\n      var id = element.id;\n      var tag = element.tagName;\n      // Create a random new id for the element\n      var newId = 'ID' + Math.random().toString(36).substr(2, 10);\n      element.id = newId;\n      // Get array with possible property names for the element's tag name. If\n      // the array is empty, the only property name is the same as the tag name.\n      var properties = TAG_NAME_PROPERTIES_MAP[tag];\n      if (properties) {\n        if (!properties.length) {\n          properties = [tag];\n        }\n        for (var j = 0; j < properties.length; j++) {\n          var property = properties[j];\n          // Get all elements that have a reference attribute using the id.\n          // On Internet Explorer reference values are stored with double quotes\n          // in the form url(\"#anyId\"), while on other browsers use the form\n          // url(#anyId) without double quotes. Therefore we cannot use the\n          // full value for the query selector.\n          var refElements = svg.querySelectorAll('[' + property + '*=\"#' + id + '\"]');\n          for (var k = 0; k < refElements.length; k++) {\n            var refElement = refElements[k];\n            // Make sure the value is not using a longer id that contains our id,\n            // for example #mask12 if we searched for #mask1.\n            if (refElements[k].getAttribute(property).replace(/\"/g, '') === 'url(#' + id + ')') {\n              refElements[k].setAttribute(property, 'url(#' + newId + ')');\n            }\n          }\n        }\n      }\n    }\n  }\n\n  // inject svg by replacing the img element with the svg element in the DOM\n  function inject(img, svg, svgString, absUrl, options) {\n    svg = svg || buildSvg(svgString, absUrl);       \n\n    if (svg) {\n      var parentNode = img.parentNode;\n\n      if (parentNode) {\n        copyAttributes(img, svg, options);\n        makeIdsUnique(svg);\n        var injectElem = options.beforeInject(img, svg) || svg;\n        parentNode.replaceChild(injectElem, img);\n        img[STR___SVGINJECT] = INJECTED;\n        removeOnLoadAttribute(img);\n        options.afterInject(img, injectElem);\n      }\n    } else {\n      svgInvalid(img, options);\n    }\n  }\n\n  function extendOptions() {\n    var newOptions = {};\n    var args = arguments;\n\n    for (var i = 0; i < args.length; ++i) {\n      var argument = args[i];\n      if (argument) {\n        for (var key in argument) {\n          newOptions[key] = argument[key];\n        }\n      }\n    }\n    return newOptions;\n  }\n\n  function addStyleToHead(css) {\n    var head = document.getElementsByTagName('head')[0];\n\n    if (head) {\n      var style = document.createElement('style');\n      style.type = 'text/css';\n      if (style.styleSheet){\n        // This is required for IE8 and below.\n        style.styleSheet.cssText = css;\n      } else {\n        style.appendChild(document.createTextNode(css));\n      }\n      head.appendChild(style);\n    }\n  }\n\n  function buildSvg(svgStr, absUrl) {\n    try {\n      DIV_ELEMENT.innerHTML = svgStr;\n    } catch (e) {\n      return NULL;\n    }\n    var svg = DIV_ELEMENT.removeChild(DIV_ELEMENT.firstChild);\n\n    if (!isSVGElem(svg)) {\n      return NULL;\n    }\n\n    svg.insertBefore(document.createComment('SVG injected from \"' + absUrl + '\"'), svg.firstChild);\n    return svg;\n  }\n\n  function removeOnLoadAttribute(img) {\n    img.removeAttribute('onload');\n  }\n\n  function fail(img, status, options) {\n    img[STR___SVGINJECT] = FAIL;\n    options.onFail(img, status);\n  }\n\n  function svgInvalid(img, options) {\n    removeOnLoadAttribute(img);\n    fail(img, STR_SVG_INVALID, options);\n  }\n\n  function svgNotSupported(img, options) {\n    removeOnLoadAttribute(img);\n    fail(img, STR_SVG_NOT_SUPPORTED, options);\n  }\n\n  function loadFail(img, options) {\n    fail(img, STR_LOAD_FAIL, options);\n  }\n\n  function loadFailOrSvgNotSupported(img, options) {\n    if (SVG_NOT_SUPPORTED) {\n      svgNotSupported(img, options);\n    } else {\n      removeOnLoadAttribute(img);\n      loadFail(img, options);\n    }\n  }\n\n  function removeEventListeners(img) {\n    img.onload = NULL;\n    img.onerror = NULL;\n  }\n\n  function throwImgNotSet() {\n    throw new Error('img not set');\n  }\n\n  function createSVGInject(globalName, options) {\n    var defaultOptions = extendOptions(DEFAULT_OPTIONS, options);\n    var svgLoadCache = {};\n\n    addStyleToHead('img[onload*=\"' + globalName + '\"]{visibility:hidden;}');\n\n    /**\n     * SVGInject\n     *\n     * Injects the SVG specified in he `src` attribute of the specified `img` element or array of `img` elements.\n     *\n     * Options:\n     * cache: If set to `true` the SVG will be cached using the absolute URL. Default value is `true`.\n     * copyAttributes: If set to `true` the attributes will be copied from `img` to `svg`. Dfault value is `true.\n     * beforeInject: Hook before SVG is injected. The `img` and `svg` elements are passed as parameters. If any html element is returned it gets injected instead of applying the default SVG injection.\n     * afterInject: Hook after SVG is injected. The `img` and `svg` elements are passed as parameters.\n     * onFail: Hook after injection fails. The `img` element and a `status` string are passed as an parameter. The `status` can be either `'SVG_NOT_SUPPORTED'` (the browser does not support SVG), `'SVG_INVALID'` (the SVG is not in a valid format) or `'LOAD_FAILED'` (loading of the SVG failed).\n     *\n     * @param {HTMLImageElement} img - an img element or an array of img elements\n     * @param {Object} [options] - optional parameter with [options](#options) for this injection.\n     */\n    function SVGInject(img, options) {\n      if (img) {\n        var length = img.length;\n        var src = img.src;\n\n        if (src && !img[STR___SVGINJECT]) {\n          img[STR___SVGINJECT] = INJECT;\n\n          options = extendOptions(defaultOptions, options);\n\n          if (SVG_NOT_SUPPORTED) {\n            svgNotSupported(img, options);\n            return;\n          }\n\n          var absUrl = getAbsoluteUrl(src);\n          var cache = options.cache;\n\n          var onError = function() {\n            removeEventListeners(img);\n            loadFailOrSvgNotSupported(img, options);\n          };\n\n          var setSvgLoadCacheValue = function(val) {\n            if (cache) {\n              var svgLoad = svgLoadCache[absUrl];\n              for (var i = 0; i < svgLoad.length; ++i) {\n                svgLoad[i](val);\n              }\n              svgLoadCache[absUrl] = val;\n            }\n          };\n\n          var afterImageComplete = function() {\n            removeEventListeners(img);\n\n            load(absUrl, function(svgXml, svgString) {\n              if (img[STR___SVGINJECT] == INJECT) {\n                // for IE9 do not use the nativ svgXml\n                var svg = svgXml instanceof Document ? svgXml.documentElement : buildSvg(svgString, absUrl);\n\n                if (svg) {\n                  var afterLoad = options.afterLoad;\n                  if (afterLoad) {\n                    afterLoad(img, svg);\n                    svgString = xmlSerializer.serializeToString(svg);\n                  }\n                  \n                  inject(img, svg, svgString, absUrl, options);\n\n                  setSvgLoadCacheValue(svgString);\n                } else {\n                  svgInvalid(img, options);\n                }\n              }\n            }, function() {\n              loadFail(img, options);\n              setSvgLoadCacheValue(NULL);\n            });\n          };\n\n          if (cache) {\n            var svgLoad = svgLoadCache[absUrl];\n\n            if (typeof svgLoad != 'undefined') {\n              if (Array.isArray(svgLoad)) {\n                svgLoad.push(function(svgString) {\n                  if (svgString === NULL) {\n                    loadFail(img, options);\n                  } else {\n                    inject(img, NULL, svgString, absUrl, options);\n                  }\n                });\n              } else if (svgLoad === NULL) {\n                loadFail(img, options);\n              } else {\n                inject(img, NULL, svgLoad, absUrl, options);\n              }\n              return;\n            } else {\n              svgLoadCache[absUrl] = [];\n            }\n          }\n\n          if (img.complete) {\n            afterImageComplete();\n          } else {\n            img.onload = afterImageComplete;\n            img.onerror = onError;\n          }\n        } else if (length) {\n          for (var i = 0; i < length; ++i) {\n            SVGInject(img[i], options);\n          }\n        }\n      } else {\n        throwImgNotSet();\n      }\n    }\n\n    /**\n     * Sets the default [options](#options) for SVGInject.\n     *\n     * @param {Object} [options] - default [options](#options) for an injection.\n     */\n    SVGInject.setOptions = function(options) {\n      defaultOptions = extendOptions(defaultOptions, options);\n    };\n\n    // Create a new instance of SVGInject\n    SVGInject.create = createSVGInject;\n\n    /**\n     * Used in `onerror Event of an `<img>` element to handle cases when the loading the original src fails (for example if file is not found or if the browser does not support SVG). This triggers a call to the options onFail hook if available. The optional second parameter will be set as the new src attribute for the img element.\n     *\n     * @param {HTMLImageElement} img - an img element\n     * @param {String} [fallbackSrc] - optional parameter fallback src\n     */\n    SVGInject.err = function(img, fallbackSrc) {\n      if (img) {\n        if (img[STR___SVGINJECT] != FAIL) {\n          removeEventListeners(img);\n          loadFailOrSvgNotSupported(img, defaultOptions);\n          if (fallbackSrc) {\n            img.src = fallbackSrc;\n          }\n        }\n      } else {\n        throwImgNotSet();\n      }\n    };\n\n    window[globalName] = SVGInject;\n\n    return SVGInject;\n  }\n\n  var SVGInjectInstance = createSVGInject('SVGInject');\n\n  if (typeof module == 'object' && typeof module.exports == 'object') {\n    module.exports = SVGInjectInstance;\n  }\n})(window, document);\n"]}