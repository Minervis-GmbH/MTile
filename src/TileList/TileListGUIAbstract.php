<?php
namespace srag\Plugins\SrTile\TileList;

use srag\Plugins\SrTile\Tile\TileGUI;
use srag\Plugins\SrTile\Utils\SrTileTrait;
use srag\DIC\SrTile\DICTrait;

use ilSrTilePlugin;

/**
 * Class TileListContainerGUI
 *
 * Generated by srag\PluginGenerator v0.9.2
 *
 * @author            studer + raimann ag - Team Custom 1 <support-custom1@studer-raimann.ch>
 * @author            studer + raimann ag - Martin Studer <ms@studer-raimann.ch>
 *
 */
abstract class TileListGUIAbstract implements TileListGUIInterface {

	use SrTileTrait;
	use DICTrait;

	const PLUGIN_CLASS_NAME = ilSrTilePlugin::class;


	/**
	 * @var TileListInterface $tile_list
	 */
	protected $tile_list = array();


	/**
	 * @return string
	 * @throws \ilTemplateException
	 * @throws \srag\DIC\SrTile\Exception\DICException
	 */
	public function render():string {
		$tile_list_html = "";

		if(count($this->tile_list->getTiles()) > 0) {
			self::dic()->mainTemplate()->addCss(self::plugin()->directory() . "/css/srtile.css");

			$tpl = self::plugin()->template("Tile/tpl.tiles.html");

			$tpl->setCurrentBlock('row');
				$tile_html = self::getHtml($this->tile_list);
				$tpl->setVariable("TILES", $tile_html);
				$tpl->parseCurrentBlock();
			$tile_list_html = $tpl->get();
		}

		$this->hideOriginalRowsOfTiles();

		return $tile_list_html;
	}

	/**
	 *
	 * @return string
	 * @throws \ilTemplateException
	 * @throws \srag\DIC\SrTile\Exception\DICException
	 */
	public function getHtml(): string {
		$tile_html = '';
		foreach ($this->tile_list->getTiles() as $tile) {
			$tile_gui = new TileGUI($tile);
			$tile_html .= $tile_gui->render();
		}
		return $tile_html;
	}


	/**
	 * return void
	 */
	abstract function hideOriginalRowsOfTiles() /*:void*/;
}